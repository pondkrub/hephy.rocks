// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 8, 13, 11, 56, 2, 293417281, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(2019, 8, 8, 13, 51, 12, 390915853, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(2019, 8, 13, 11, 56, 2, 289958113, time.UTC),
			uncompressedSize: 6229,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5f\x6f\x1b\x37\x12\x7f\xf7\xa7\x18\x28\x0f\x69\x00\x69\x65\xd5\x6d\x71\xd8\x9e\x0b\xa4\x49\xe3\xcb\xa5\x71\x8c\xf8\x72\x87\x7b\xba\x52\xdc\x91\x96\x10\x97\xdc\xe3\x90\x52\x05\xa3\xdf\xfd\x30\xe4\xfe\xe1\x5a\x72\x52\xe4\xed\xf2\x10\xdb\xdc\xe1\xfc\x25\x7f\xf3\x1b\x2e\x16\x8b\x0b\xd1\xaa\x7f\xa2\x23\x65\x4d\x09\xa2\x6d\x69\xb9\x5f\x5d\xec\x94\xa9\x4a\x78\x8d\xad\xb6\xc7\x06\x8d\xbf\x68\xd0\x8b\x4a\x78\x51\x5e\x00\x18\xd1\x60\x09\x1b\x1d\x7e\x7f\x78\x00\xb5\x81\xe2\x56\x34\x48\xad\x90\x08\x7f\xfc\xd1\x7d\x8f\x7f\x96\xf0\xf0\x30\xfd\xfa\xf0\x00\x68\x2a\x16\xa3\x16\x25\x2b\x73\xd8\x6a\x25\x05\x95\xb0\xba\x00\x20\xd4\x28\xbd\x75\xfc\x05\xa0\x11\x5e\xd6\xbf\x8a\x35\x6a\x4a\x0b\xb9\x6d\x96\xf6\x4e\x78\xdc\x1e\xd3\x47\x7f\x6c\xb1\x84\x8f\x28\x1d\x0a\x8f\x17\x00\x1e\x9b\x56\x0b\x8f\x9d\xb2\x2c\x02\xfe\x27\x8c\xb1\x5e\x78\x65\xcd\xa0\x1c\xa0\x75\xb6\x41\x5f\x63\xa0\x42\xd9\x65\x6b\x9d\x2f\x61\x76\x75\x79\xb5\x9a\xc1\x33\xf0\xa8\x75\x26\x01\xde\x02\x49\x27\x5a\x84\x65\x83\xde\x29\x49\x1c\x5c\x6b\x95\xf1\xcf\x09\x78\x73\xd1\x29\xd6\x93\x18\x1e\x45\x01\xd0\xe7\x22\xfe\x8e\x6e\xaf\x24\xbe\x94\xd2\x06\xe3\x6f\xa7\x82\x00\x7b\xab\x43\x83\x83\xaa\x45\xa7\x6a\xab\xfc\x62\x87\xc7\xc1\x00\x71\x16\xfc\x68\xb0\x5f\x19\xf5\x2d\x78\x4b\x15\x0b\x9c\x49\x55\xb8\x11\x41\xfb\xf7\xb6\xc2\x12\x2e\xbf\xbb\xbc\x84\x67\x70\xa8\xd1\x40\xc3\xde\x60\x05\x0e\x45\xb5\xb0\x46\x1f\xe7\x70\x40\x38\x58\xf3\xdc\xc3\x1a\x41\xac\x35\x72\x3e\x64\xdd\xd8\xea\xa2\x53\xf8\x0c\xfe\x51\x2b\x02\x45\x20\xc0\x37\xed\x86\x20\x10\x56\xb0\xb1\x0e\xb6\x68\xd0\x09\xaf\xcc\x16\xee\xef\xff\x06\x3b\x3c\x52\x01\x6f\x0d\xbc\xfb\x0b\xc1\x4f\xd7\xb0\x2a\x56\x97\xf3\x41\x4b\x6f\x3b\x85\x40\x20\x1c\xe6\x7e\x90\x65\x57\x0c\x62\x05\x02\x08\x5b\xc1\x87\xa2\x4b\x14\x1c\x70\x50\x23\x85\x81\x83\x53\x9e\x1d\x2d\xce\xe7\x6f\x8b\x66\x48\x06\x36\xad\x3f\xbe\x56\x2e\x4f\x62\x83\x95\x0a\x4d\x09\xef\xb1\xb1\xee\x98\xc7\x89\xb0\xb1\x5a\xdb\x03\x47\xd4\x99\x56\x14\x43\x0d\xc4\x6b\x02\x64\x20\x6f\x1b\xc5\x19\xd8\x19\x7b\x30\xff\xa9\x2d\x79\x1a\x54\x6c\x94\xc6\x39\x1c\x6a\x25\x6b\x38\xda\x00\x07\xa5\x75\x0a\xca\x5b\xa8\x2c\xdf\x33\x5e\xe6\x4d\xfc\x8b\x03\x7b\x30\xec\xf6\xa0\xc0\x61\x6b\xc1\x09\x5f\xa3\x03\x5f\x0b\xd3\x19\xde\x2a\x5f\x87\x35\x58\x5e\x44\xd0\x6a\x87\x05\xfc\xdb\x86\xe7\x5a\x83\xd0\x64\x7b\x13\xd3\x64\x83\xf2\xa0\x8c\xb7\x71\x8f\xb4\xc6\x0b\x65\xd0\xcd\x61\x8d\xda\x1e\x0a\xb8\xc7\x31\xab\xb5\xf7\x2d\x95\xcb\x65\xb2\x53\x48\xdb\x2c\x0f\x28\xf6\x78\xb0\x6e\x47\x4b\x3e\x69\xcb\xb5\xb6\xeb\x65\x23\xc8\xa3\x5b\x56\x56\xd2\x72\xb9\x0d\xaa\x42\x5a\x06\xc2\x45\xeb\xd4\x5e\x78\x8c\xc7\x91\x83\x2b\x9a\x6a\xd0\xdd\x57\x87\xa8\x5e\x48\x6b\x36\x6a\x3b\x7c\x02\x48\x0b\xef\x45\x5b\x66\x8b\xf9\xd5\x5a\x64\xdb\xbe\xb6\x52\xc5\x2e\xac\x71\x99\x94\x8c\x07\xf2\x8b\x55\x3a\x28\xaa\x79\xa5\x16\x7b\x04\x01\x95\xda\x6c\xd0\x31\x8c\xf6\x1a\xba\x7b\x36\x42\x65\x2c\x4a\x52\x97\x97\x85\xe1\x66\xaf\x2a\xec\x0b\xb1\x51\xdb\x46\xb4\xa3\x23\xca\xd7\x20\x0c\xa0\xf1\xee\x18\x63\xf8\x2d\x09\xfd\x36\x07\x61\x2a\x08\x46\xda\x86\xf1\x3b\xee\x4f\xd1\xbe\x8f\x05\x16\x66\x4c\x33\x9a\x7d\xd4\xa0\x90\xba\x0a\x9f\x54\x80\xd3\xf0\x15\x15\xc8\xb6\x7d\xb1\x02\x11\x1b\xbc\x05\xd5\x30\x72\xc2\xcd\xdd\x4d\x84\x05\xf8\x86\xc3\x22\xb5\x35\xca\x8c\xc6\x39\xb8\x3d\x3a\xb5\x51\x32\x42\x38\xb4\xc1\xb5\x96\x90\x5e\xfc\x89\x44\x0e\x5a\x12\xa0\xa4\x2c\x72\x82\xd8\xde\x9f\x48\x1c\x08\xb7\x1d\x2f\xee\x13\x19\xdb\xb6\x5b\x46\x14\xca\x52\x33\x05\xe5\x67\x4f\xc0\xf2\xe9\xbe\x33\xb0\xdc\xa7\x73\xb8\x9b\x27\x1d\x21\xeb\x19\x5d\xd6\x1d\x46\xe4\x34\x16\x66\x25\xb7\x45\xf2\x33\x50\x8d\xd8\x62\x3a\xfd\xbc\xa1\x80\x37\xca\x54\x31\xe6\x86\x81\xc6\xa1\x1c\x4f\x6d\x02\x19\x8d\x82\x90\xe1\x24\x6e\xe5\x22\x30\x73\x00\xe1\x07\x24\x60\x18\xa8\xac\xdc\xa1\x8b\x68\xe0\x4e\xf0\xc0\x8b\x21\x7d\x7d\x2d\x99\x05\x30\x43\x60\xcb\x5e\x6c\x81\xbd\x2d\x06\x99\x68\xaa\x84\x4e\xa9\xb2\x51\x8d\xac\xe2\x8f\x72\x55\xac\xae\x8a\xab\xa9\xec\x5d\xd0\xfa\xce\x6a\x25\x8f\x25\xbc\xdd\xdc\x5a\x7f\xe7\x90\xf2\x48\x1c\x92\x0d\x4e\x22\xe5\xe8\xee\xf0\xbf\x01\xc9\x4f\xd6\x00\x64\x1b\x4a\xf8\xfe\xb2\x99\x2c\x36\xb1\x01\x94\xf0\xc3\x77\xef\xd5\x48\x1e\xac\xcb\x37\x2f\xc6\xea\xdc\x45\x22\x71\x75\x79\xc5\xfd\x54\x99\x8d\x75\x4d\x3c\xb6\x42\x0f\xd2\x5a\xed\xd1\x20\xd1\x9d\xb3\x6b\xcc\x3d\xe0\xb4\xde\x4c\x7b\x79\x32\x95\x14\x4e\x97\x85\xaf\x4b\x58\x8a\x56\xa5\x4c\xef\x7f\x58\xaa\x0a\x8d\x57\xfe\x58\xb4\x61\x9d\xc9\x2a\xa3\xbc\x12\xfa\x35\x6a\x71\xbc\xe7\x3b\x5a\x51\x09\xdf\x67\x02\x5e\x35\x68\x83\x3f\xf3\x8d\x5b\xaf\xfa\xff\x70\x35\xbb\xb8\x93\xc2\x9c\x27\x4d\x90\x9a\xdf\x5d\xf2\x0c\xbd\x8c\x9e\x55\x4b\xa2\x9a\xd9\x9f\x4d\x7c\x14\xb4\xed\x30\x67\xcb\x25\x03\x65\xd2\x99\x7b\x4e\x69\x0f\x51\xbd\x9c\x40\x65\x9f\xb3\x0f\x46\x1f\x4b\xf0\x2e\x20\x6b\x63\x66\x14\x51\x6a\xdd\x81\x3b\x5f\xab\x16\xdd\xc6\x3a\x89\xac\x34\x51\x21\x66\x42\x4f\x39\x9e\xb3\x95\xa9\xef\x7b\xe1\x3a\xdf\x93\xd8\xd7\xb9\x9f\xdd\xd1\xb7\x46\xea\x10\xd1\x93\x09\x5d\x6a\x72\x3d\xb2\x26\xc6\xf0\x05\x82\xd3\x53\x9c\x1f\x79\xeb\x23\xf2\x31\x20\x2c\x54\x28\xb5\x70\x4c\xe4\xd6\x76\x9f\x01\xc0\x67\xa8\x40\x82\xc8\x3c\x78\x67\xad\x5f\x16\x44\xf5\x93\x01\x08\x33\xb1\x3a\x1b\xdb\xd4\x2c\x59\x9e\xf7\x22\x99\x06\x34\x7b\xe5\xac\x89\x4d\x21\xf5\xdb\xd9\xbb\x4f\x3f\xff\xf2\xea\xc3\xed\x9b\xb7\x37\xb3\xd4\x06\xe6\x9c\x0f\xbb\x47\xe7\xa6\x3d\x3b\x53\x13\xdb\xdc\xfa\x98\x3a\xaa\xd7\xe7\x62\x3c\x69\xb6\xa7\x31\x8e\x87\x93\x85\x9f\x0c\x94\xfb\x1e\x8f\x23\xbd\x35\x86\xe9\x8c\x8e\x74\xde\xc5\x9a\x64\x2a\x1e\x93\x9a\xbc\xe8\x91\xd1\xf4\x84\x5c\x18\x10\xda\xa3\x33\x4c\xb8\x4f\x3c\xde\x38\xdb\xf0\xb1\xe8\x59\xcb\x1c\x04\xf1\x71\xeb\x3a\x2b\xa7\x41\x5b\xb9\xa3\xd3\x62\xa3\xd9\x97\x67\xf2\x32\xa6\x7b\x92\x97\xbd\xd0\x01\x4f\x72\xf2\xa5\x43\xfc\xf8\x0c\xf4\x7d\xf7\x33\x27\x80\xdb\xfe\xb4\xdd\x7f\xa6\xe1\x3f\x71\x2e\x59\x2a\x31\x9c\x89\xdc\x14\x1f\x46\xa7\xd9\x64\x39\x89\x21\x95\x21\x0d\x6e\x58\x71\x23\x92\x42\xd6\x58\x71\x66\xf3\xd2\x0e\xcc\x92\x8b\xc8\x69\x99\x67\x5a\xac\xeb\xa8\x63\xb6\xa1\x1b\x3c\xe3\xc6\x79\x34\xc2\x03\x13\x85\xb6\xd5\x47\x4e\x04\xe5\xa9\x18\x09\x9c\x3f\x58\xf6\x32\x70\x49\xe3\x81\x8b\x53\x72\xac\x03\xd4\xf6\x10\x87\x42\x6b\x0c\x4a\x1f\xc9\x9d\x9f\xa6\x6e\xb1\x18\x02\x88\xec\x9f\x8d\x5f\x0f\x4b\x45\xc7\x7b\x0a\xda\xcb\x42\xea\xc0\x13\x44\xc1\xf8\xa5\xf3\x94\x7c\xa2\x74\xd5\xc6\x54\xbc\x4a\xa2\x6f\xef\x26\x41\xf1\xad\x23\xf4\x71\xe8\x9c\x16\x76\xf4\xa1\x97\xe7\xd1\xde\x3b\x96\x8c\x63\x60\x86\xc0\xb9\xc7\x9d\xf4\xf5\xc5\x84\x68\x29\x82\x26\x50\x1c\x8b\x63\xf6\x14\x56\xe9\x34\xad\x23\xae\x47\x8a\x13\xa7\xe1\x6f\xfa\x11\xf3\x45\xee\x4b\x7f\xb7\xd2\x29\x64\x66\x96\x0d\xc5\x13\x47\x18\x0b\x13\xbe\x2f\x2a\xe5\xae\x4f\x50\x3f\x77\xeb\x63\x46\xb0\xc6\xe2\x7d\xfa\xf8\x6b\x9a\xda\x85\xd9\xa6\x6f\x37\xca\xc7\x49\x92\x94\xb7\xee\x38\xa0\xd5\x1b\x26\x87\x13\xe3\xdc\x83\x82\xd3\xd7\x0f\x0f\x50\xdc\x28\xcf\x9a\xe2\xe3\xcf\x54\x62\xed\x84\x91\x75\x2f\xf4\x73\xfc\x2b\x3d\x03\xa9\x4d\x5c\xe2\xbb\x41\xe7\x76\x32\x3f\xe0\x7d\xf7\xb1\x0c\xf4\x77\xab\x4c\xb6\x61\x36\x9f\x75\xaf\x49\x9a\x30\xdf\xce\xf4\xea\xb4\x55\x1d\x84\x89\xc7\xcf\x21\x57\x55\x26\x56\xdf\x08\xa3\x36\xcc\xf7\xf8\x80\x92\xaa\xd0\xa5\x58\x1f\x31\xe7\x38\x05\x5b\x42\x08\xa6\x42\xf7\x28\x81\x0e\xb5\xf0\x6a\x8f\x91\xce\x50\x5f\xde\xed\x24\x89\x8f\x0e\xfc\x10\x1c\x85\x75\xa5\xdc\x6a\x9e\x7e\x7e\x3b\x3c\x8d\x8d\xc9\x89\x4f\x5f\xe7\x92\x13\xdf\x93\xfa\xac\xf6\x52\x67\x14\x7c\x22\x74\xe7\xf6\x07\x42\x37\x54\x8e\x65\xe0\xfc\xfe\x5f\x1a\xa1\xce\x3a\x80\xfc\xa1\xd7\xd0\x4b\x8d\x8f\x7b\x67\x41\x17\xf9\x9e\x1e\x2c\x27\x14\x4d\x7c\x30\xe2\x3c\x71\x37\x50\xfe\xd1\x80\x97\xe7\xaa\xc3\xd5\x0e\x35\xaf\x3f\x03\xa3\xfd\x8e\x4e\x17\xef\xba\xfe\xeb\x0e\x8f\xa0\xaa\x9f\x06\xb1\xcf\xb4\xca\xcc\x2b\x56\x21\x7c\x70\x38\x99\x32\xcf\xd8\x8a\x9f\x8f\x8b\x41\x9e\x9e\x8e\xdd\xe0\xef\xbe\x4f\x40\x06\x89\xc2\xc0\x2c\xb4\xe4\x1d\x8a\x66\xd6\x03\x56\xa6\xe4\x1b\x2c\xb6\xc5\x1c\xfe\xc5\x43\x14\xbc\xd2\x36\x54\x2f\x8a\x38\x44\x7b\xbb\x63\xfe\x46\xd0\x0a\xe7\x95\x0c\x5a\x38\xe8\x9e\x6c\x3a\x2d\x8f\xb1\xb6\xb3\x7a\x7d\x20\x9e\xd3\x24\xeb\x2a\xe2\x70\x56\xa4\xe9\xac\x27\xe3\x8f\xb6\x45\x43\xd7\x62\x2d\x57\xdf\x5e\x9d\xfe\x9f\x07\x7c\x8f\x6e\x7f\xe6\x35\x94\x69\xc7\xd8\x68\xb8\x6a\x3f\xe6\x88\x27\x76\x8c\x94\x2e\xa1\x2e\xfa\xec\x89\xf5\x79\xf6\x4a\x9b\x3d\xb7\x72\x88\xf1\x91\x20\xb6\xfe\x29\x2e\x69\x45\x1e\xcd\xa2\x73\xe1\xba\xbc\xba\xbc\x5a\x5d\x74\x27\xfa\x65\x55\xa9\x34\x76\x31\x9e\xbd\xe4\x76\x3e\x81\x8e\xf1\xfb\xd8\xd2\x1e\x1e\xc0\x45\x74\xfc\xc2\xee\x45\x7c\xeb\x9e\xdc\x82\xf1\xb7\xde\xc0\x87\xb6\x53\xff\xfa\xf6\xbe\xef\x45\x34\xef\x28\x52\x70\x5d\x67\x02\x53\x59\x4f\x60\xa3\x30\x34\xe2\x18\xc7\x55\xbd\x1f\x1f\x2e\x0c\x69\x6b\x77\xa1\x05\x45\x14\x90\xc0\x1a\x20\xdb\x20\xbc\x0b\x6b\x74\x06\x3d\x12\x6b\x0f\x2d\x8d\xef\x12\x95\xa1\x7e\x22\x9e\xdd\x5a\x83\xb3\xfc\xcb\xab\xe8\x40\xfe\x32\x91\x8c\xd3\xf4\xb1\xa2\xa7\x3a\xd1\xbf\xc9\x97\x81\x85\xcd\x56\xb3\x8b\xff\x05\x00\x00\xff\xff\xb6\xeb\x7c\x60\x55\x18\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(2019, 8, 8, 13, 51, 12, 391220692, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(2019, 8, 8, 13, 51, 12, 391706708, time.UTC),
			uncompressedSize: 874,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\xcd\x6e\x9c\x40\x10\x84\xef\x3c\x45\x49\x7b\x0d\x1b\x61\x69\x2f\xdc\xa2\x38\x89\x2c\x25\xd6\x5e\x9c\x7b\x7b\x68\xf0\x28\xf3\x97\xe9\x66\xb3\x04\xf9\xdd\xa3\xd9\x5f\x36\xf6\x9c\x80\xaa\xaf\xa7\xa6\x80\xba\xae\xab\x15\x3c\x7b\x43\xe6\x85\x3b\x74\x9c\x5c\x9c\x3c\x07\xc5\x28\xdc\xe1\x79\xc2\x57\x37\xee\xa1\x11\x07\x47\xb5\x82\x89\x41\xc9\x06\xce\xb0\x9e\x06\x86\x67\xa5\x8e\x94\xd6\x15\x25\xfb\x93\xb3\xd8\x18\x5a\x50\x4a\xf2\x71\xd7\x54\xbf\x6c\xe8\x5a\xdc\x5f\xc6\x56\x67\x7b\x5b\x01\x81\x3c\xb7\xd7\xdd\xe7\x19\xb6\xc7\xfa\x91\x3c\x4b\x22\xc3\x78\x7d\x3d\x99\x0e\xb7\x2d\xe6\xf9\x56\x9d\x67\x70\xe8\x8a\x4d\x12\x9b\x32\x31\x73\x72\xd6\x90\xb4\x68\x2a\x40\xd8\xb1\xd1\x98\x8b\x02\x78\x52\xf3\xf2\x9d\x9e\xd9\xc9\xf1\xc1\x9b\x00\x15\xa0\xec\x93\x23\xe5\x13\xb2\x08\x5b\x96\xbb\xa1\xdf\xe3\x81\x73\x94\xb2\x2e\x5d\x5d\x98\xfa\x5d\xa6\xac\x43\x9b\x0b\xa1\x6d\xd6\x9b\x75\xb3\xb9\xd5\xb7\xa3\x73\xdb\xe8\xac\x99\x5a\x3c\xf4\x8f\x51\xb7\x99\xa5\xd4\x7a\x76\x51\x1e\x16\xf9\x6a\xd4\x1e\x9b\xe6\x0e\xc0\x0a\x3f\x68\x6f\xfd\xe8\xcb\x0e\x31\x4f\xe5\x95\x8e\xc2\x1f\x60\x03\x3c\x0f\xf4\x3c\x29\xcb\x12\x7c\xc0\xc6\xe3\x06\x14\xfb\x97\xd1\xc7\x8c\x18\x18\x56\xd9\x2f\xed\x09\x4d\x73\xd7\x34\x58\xe1\x9e\x7b\x1a\x9d\x22\xc5\x7c\xcd\xb5\x2a\x9e\xdd\xee\x78\xf9\x14\x4c\xf4\x87\x8f\x4c\x23\x06\x56\xb8\x38\x08\x62\x0f\x26\xf3\x82\xcc\xbf\x47\x16\x05\x85\x0e\x99\x25\xc5\x20\xbc\xbe\x0c\x2a\x53\x6f\x4e\x78\xec\xd3\x38\xcb\x41\xaf\x07\x58\x74\xbf\x8d\x59\xdb\x63\xba\x8b\x2c\x6c\xc6\x6c\x75\xfa\x1c\x83\xf2\x5e\xdb\x05\x97\xc7\xf0\x49\x9e\x84\xf3\xff\xcc\x49\xfa\x96\xe3\x98\xde\x6a\xe4\x5c\xfc\xb3\xcd\x76\x67\x1d\x0f\xfc\x45\x0c\x39\xd2\xc3\xaf\xd0\x93\x13\xae\xfe\x05\x00\x00\xff\xff\x5d\x9a\x63\xab\x6a\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(2019, 8, 8, 13, 51, 12, 391977285, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
